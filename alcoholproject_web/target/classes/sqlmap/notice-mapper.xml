<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="notice.mapper">
		<!-- 중요 공지사항 : 아이디가 저희 테이블이랑 달라서 일단 mem_id로 넣었어요 :) -->
	<select id="searchIm" resultType="notice.NoticeVO">
		SELECT A.*,(SELECT MEM_NAME FROM MEM_INFO_TB WHERE MEM_INFO_TB.MEM_ID = A.WRITER) AS NAME
		FROM NOTICE_INFO_TB A
		WHERE IMPORTANT = 'Y'
	</select>
	
	<!-- 전체 글 갯수 조회 : 추후 추가 작업 필요함 : 검색 관련해서 -->
	<select id="totalList" resultType="Integer">
		SELECT COUNT(*) FROM NOTICE_INFO_TB <include refid="search_where" />
	</select>
	
	<select id="list" resultType="notice.NoticeVO">
		<!-- 페이지별 목록 조회 : inclue 사용해서 검색 조건이 주어지면 where 조건이 추가되어야함
		totalList가 먼저 바뀌고 내용이 바뀌어야한다. -->	
		SELECT * FROM (SELECT ROWNUM NO, N.*, (SELECT MEM_NAME FROM MEM_INFO_TB WHERE MEM_INFO_TB.MEM_ID = N.WRITER) NAME
		FROM (SELECT * FROM NOTICE_INFO_TB <include refid="search_where" />  ORDER BY ROOT, STEP DESC) N ORDER BY NO DESC)
		WHERE NO BETWEEN #{beginList} AND #{endList}
	</select>
	
	<!-- 검색 : 카테고리별로 : 이건 언니가 추가적으로 넣을 거 있음 작업하면 될듯~!! -->
	<sql id="search_where">
		<if test="search == 'title' or search == 'content'">
			WHERE ${search} LIKE '%'|| #{keyword} ||'%'
		</if>
		<if test="search == 'all'">
			WHERE TITLE LIKE '%'||#{keyword}||'%' OR
				CONTENT LIKE '%'||#{keyword}||'%' OR
				WRITER LIKE '%'||#{keyword}||'%'
				<!-- SELECT ID FROM MEMBER WHERE NAME LIKE '%'||#{keyword}||'%'  -->
		</if>
	</sql>
	
		<!-- 공지 상세 내용 -->
	<select id="detailNotice" resultType="notice.NoticeVO">
		SELECT B.* , (SELECT MEM_NAME FROM MEM_INFO_TB WHERE MEM_INFO_TB.MEM_ID = B.WRITER) NAME
		FROM(SELECT A.*, LAG(ID,1,0) OVER(ORDER BY ID ASC) AS prevNum, LEAD(ID,1,0) OVER(ORDER BY ID ASC) AS nextNum
			FROM NOTICE_INFO_TB A) B
		WHERE b.ID= #{id}
	</select>
	
		<!-- 최신 게시글 10개 가져오기 -->
	<select id="getNotice" resultType="notice.NoticeVO">
	<![CDATA[
		SELECT A.*, (SELECT MEM_NAME FROM MEM_INFO_TB WHERE MEM_INFO_TB.MEM_ID = A.WRITER) NAME
		FROM (SELECT ROWNUM NO, N.* FROM (SELECT * FROM NOTICE_INFO_TB order by id) N ORDER BY NO DESC) A
		WHERE ROWNUM <=10
	]]>
	</select>
	
	<!-- 조회수 증가 처리 -->
	<update id="notice_read">
		UPDATE NOTICE_INFO_TB SET READCNT = READCNT + 1 WHERE ID = #{id}
	</update>
	
		<!-- 공지사항 삽입  -->
	<insert id="notice_insert">
		INSERT INTO NOTICE_INFO_TB (ID, ROOT, TITLE, CONTENT, WRITER, FILENAME, FILEPATH, IMPORTANT) VALUES
		(NOTICE_INFO_TB_SEQ.NEXTVAL, NOTICE_INFO_TB_SEQ.CURRVAL, #{title}, 
		#{content}, #{writer}, #{filename, jdbcType=VARCHAR}, #{filepath, jdbcType=VARCHAR}, #{important})
	</insert>
	
		<!-- 공지사항 수정 : 수정하면 날짜 오늘날짜로 변경되어요 이건 취향~!!! -->
	<update id="notice_update">
		UPDATE NOTICE_INFO_TB SET TITLE = #{title}, CONTENT = #{content}, FILENAME = #{filename, jdbcType=VARCHAR}, FILEPATH = #{filepath, jdbcType=VARCHAR}, IMPORTANT = #{important}, WRITEDATE = SYSDATE
		WHERE ID = #{id}
	</update>
	
	<!-- 공지사항 답글 처리 -->
	<insert id="notice_reply_insert">
		<!-- 
		 선처리: 원글과 동일한 root 인 글에 대해
 	   원글의 step 보다 더 큰 step 인 글은 먼저 step+1 을 한다
		 답글에 대해
		 답글의 root 는  원글의 root 를 그대로,
		 답글의 step 은 원글의 step+1
		 답글의 indent 은 원글의  indent+1
  --> 
	<![CDATA[ 
		{
			CALL DECLARE BEGIN
			UPDATE NOTICE_INFO_TB SET STEP = STEP + 1
			WHERE ROOT = 	#{root} AND STEP > #{step};
	
			INSERT INTO NOTICE_INFO_TB (ID, ROOT, TITLE, CONTENT, WRITER, FILENAME, FILEPATH, STEP, INDENT, IMPORTANT)
			VALUES (NOTICE_INFO_TB_SEQ.NEXTVAL, #{root}, #{title}, #{content}, #{writer}
				, #{filename, jdbcType=VARCHAR}, #{filepath, jdbcType=VARCHAR}
				, #{step}+1, #{indent}+1, #{important} );
			END
		}		
	]]> 
	</insert>
	
	<!-- 게시물 삭제 처리 -->
	<delete id="notice_delete">
		DELETE FROM NOTICE_INFO_TB WHERE ID = #{id}
	</delete>
	
</mapper>